
AVRASM ver. 2.1.30  C:\Микрики\148 УСБ клавиатура\Debug\List\148 УСБ клавиатура.asm Tue Nov 29 00:03:07 2016

C:\Микрики\148 УСБ клавиатура\Debug\List\148 УСБ клавиатура.asm(1086): warning: Register r5 already defined by the .DEF directive
C:\Микрики\148 УСБ клавиатура\Debug\List\148 УСБ клавиатура.asm(1087): warning: Register r4 already defined by the .DEF directive
C:\Микрики\148 УСБ клавиатура\Debug\List\148 УСБ клавиатура.asm(1088): warning: Register r7 already defined by the .DEF directive
C:\Микрики\148 УСБ клавиатура\Debug\List\148 УСБ клавиатура.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Микрики\148 УСБ клавиатура\Debug\List\148 УСБ клавиатура.asm(1090): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _usbInputBufOffset=R5
                 	.DEF _usbDeviceAddr=R4
                 	.DEF _usbNewDeviceAddr=R7
                 	.DEF _usbCurrentTok=R6
                 	.DEF _button=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c075      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c211      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _usbDescriptorDevice:
000013 0112
000014 0110
000015 0000
000016 0800      	.DB  0x12,0x1,0x10,0x1,0x0,0x0,0x0,0x8
000017 16c0
000018 05df
000019 0100
00001a 0201      	.DB  0xC0,0x16,0xDF,0x5,0x0,0x1,0x1,0x2
00001b 0100      	.DB  0x0,0x1
                 _usbDescriptorConfiguration:
00001c 0209
00001d 0022
00001e 0101
00001f 8000      	.DB  0x9,0x2,0x22,0x0,0x1,0x1,0x0,0x80
000020 0932
000021 0004
000022 0100
000023 0003      	.DB  0x32,0x9,0x4,0x0,0x0,0x1,0x3,0x0
000024 0000
000025 2109
000026 0101
000027 0100      	.DB  0x0,0x0,0x9,0x21,0x1,0x1,0x0,0x1
000028 1622
000029 0700
00002a 8105
00002b 0803      	.DB  0x22,0x16,0x0,0x7,0x5,0x81,0x3,0x8
00002c 6400      	.DB  0x0,0x64
                 _usbDescriptorString0:
00002d 0304
00002e 0409      	.DB  0x4,0x3,0x9,0x4
                 _usbDescriptorStringVendor:
00002f 032c
000030 0077
000031 0065
000032 002e      	.DB  0x2C,0x3,0x77,0x0,0x65,0x0,0x2E,0x0
000033 0065
000034 0061
000035 0073
000036 0079      	.DB  0x65,0x0,0x61,0x0,0x73,0x0,0x79,0x0
000037 0065
000038 006c
000039 0065
00003a 0063      	.DB  0x65,0x0,0x6C,0x0,0x65,0x0,0x63,0x0
00003b 0074
00003c 0072
00003d 006f
00003e 006e      	.DB  0x74,0x0,0x72,0x0,0x6F,0x0,0x6E,0x0
00003f 0069
000040 0063
000041 0073
000042 002e      	.DB  0x69,0x0,0x63,0x0,0x73,0x0,0x2E,0x0
000043 0072
000044 0075      	.DB  0x72,0x0,0x75,0x0
                 _usbDescriptorStringDevice:
000045 0318
000046 0048
000047 0069
000048 0064      	.DB  0x18,0x3,0x48,0x0,0x69,0x0,0x64,0x0
000049 0020
00004a 0065
00004b 0078
00004c 0061      	.DB  0x20,0x0,0x65,0x0,0x78,0x0,0x61,0x0
00004d 006d
00004e 0070
00004f 006c
000050 0065      	.DB  0x6D,0x0,0x70,0x0,0x6C,0x0,0x65,0x0
                 _usbDescriptorStringSerialNumber:
000051 0001
000052 0001
000053 0003
000054 0004      	.DB  0x1,0x0,0x1,0x0,0x3,0x0,0x4,0x0
000055 0005
000056 0006
000057 0007
000058 0008      	.DB  0x5,0x0,0x6,0x0,0x7,0x0,0x8,0x0
                 _usbDescriptorHidReport:
000059 0006
00005a 09ff
00005b a101
00005c 1501      	.DB  0x6,0x0,0xFF,0x9,0x1,0xA1,0x1,0x15
00005d 2600
00005e 00ff
00005f 0875
000060 0195      	.DB  0x0,0x26,0xFF,0x0,0x75,0x8,0x95,0x1
000061 0009
000062 02b2
000063 c001      	.DB  0x9,0x0,0xB2,0x2,0x1,0xC0
                 _tbl10_G100:
000064 2710
000065 03e8
000066 0064
000067 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000068 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000069 1000
00006a 0100
00006b 0010
00006c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x5:
C:\Микрики\148 УСБ клавиатура\Debug\List\148 УСБ клавиатура.asm(1156): warning: .cseg .db misalignment - padding zero byte
00006d 005a      	.DB  0x5A
                 _0x6:
C:\Микрики\148 УСБ клавиатура\Debug\List\148 УСБ клавиатура.asm(1158): warning: .cseg .db misalignment - padding zero byte
00006e 00ff      	.DB  0xFF
                 
                 __GLOBAL_INI_TBL:
00006f 0001      	.DW  0x01
000070 0187      	.DW  _usbTxLen
000071 00da      	.DW  _0x5*2
                 
000072 0001      	.DW  0x01
000073 0193      	.DW  _usbMsgLen_G000
000074 00dc      	.DW  _0x6*2
                 
                 _0xFFFFFFFF:
000075 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000076 94f8      	CLI
000077 27ee      	CLR  R30
000078 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000079 e0f1      	LDI  R31,1
00007a bffb      	OUT  GICR,R31
00007b bfeb      	OUT  GICR,R30
00007c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00007d e08d      	LDI  R24,(14-2)+1
00007e e0a2      	LDI  R26,2
00007f 27bb      	CLR  R27
                 __CLEAR_REG:
000080 93ed      	ST   X+,R30
000081 958a      	DEC  R24
000082 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000083 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000084 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000085 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000086 93ed      	ST   X+,R30
000087 9701      	SBIW R24,1
000088 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000089 edee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008b 9185      	LPM  R24,Z+
00008c 9195      	LPM  R25,Z+
00008d 9700      	SBIW R24,0
00008e f061      	BREQ __GLOBAL_INI_END
00008f 91a5      	LPM  R26,Z+
000090 91b5      	LPM  R27,Z+
000091 9005      	LPM  R0,Z+
000092 9015      	LPM  R1,Z+
000093 01bf      	MOVW R22,R30
000094 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000095 9005      	LPM  R0,Z+
000096 920d      	ST   X+,R0
000097 9701      	SBIW R24,1
000098 f7e1      	BRNE __GLOBAL_INI_LOOP
000099 01fb      	MOVW R30,R22
00009a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009c bfed      	OUT  SPL,R30
00009d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a0 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a1 c25a      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;//#include <avr/interrupt.h>
                 ;//#include <util/delay.h>
                 ;//#include <avr/pgmspace.h>   /* нужно для usbdrv.h */
                 ;#include <stdio.h>
                 ;#include "usbdrv.c"
                 ;/* Name: usbdrv.c
                 ; * Project: V-USB, virtual USB port for Atmel's(r) AVR(r) microcontrollers
                 ; * Author: Christian Starkjohann
                 ; * Creation Date: 2004-12-29
                 ; * Tabsize: 4
                 ; * Copyright: (c) 2005 by OBJECTIVE DEVELOPMENT Software GmbH
                 ; * License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)
                 ; */
                 ;
                 ;#include "usbdrv.h"
                 
                 	.CSEG
                 _usbFunctionDescriptor_G000:
                 ; .FSTART _usbFunctionDescriptor_G000
0000a2 9508      	RET
                 ; .FEND
                 _usbCrc16Append:
                 ; .FSTART _usbCrc16Append
0000a3 9622      	ADIW R28,2
0000a4 9508      	RET
                 ; .FEND
                 ;#include "oddebug.h"
                 ;
                 ;flash char usbHidReportDescriptor[22] = { // USB report descriptor         // Дескриптор описывает структуру пакета данн ...
                 ;    0x06, 0x00, 0xff,                       // USAGE_PAGE (Generic Desktop)
                 ;    0x09, 0x01,                             // USAGE (Vendor Usage 1)
                 ;    0xa1, 0x01,                             // COLLECTION (Application)
                 ;    0x15, 0x00,                             //    LOGICAL_MINIMUM (0)        // min. значение для данных
                 ;    0x26, 0xff, 0x00,                       //    LOGICAL_MAXIMUM (255)      // max. значение для данных, 255 тут не слу ...
                 ;    0x75, 0x08,                             //    REPORT_SIZE (8)            // информация передается порциями, это разм ...
                 ;    0x95, 1,    //    REPORT_COUNT               // количество порций (у нашем примере = 3, описанная выше структура пер ...
                 ;    0x09, 0x00,                             //    USAGE (Undefined)
                 ;    0xb2, 0x02, 0x01,                       //    FEATURE (Data,Var,Abs,Buf)
                 ;    0xc0                                    // END_COLLECTION
                 ;};
                 ;/* Здесь мы описали только один report, из-за чего не нужно использовать report-ID (он должен быть первым байтом).
                 ; * С его помощью передадим 3 байта данных (размер одного REPORT_SIZE = 8 бит = 1 байт, их количество REPORT_COUNT = 3).
                 ; */
                 ;
                 ;/*
                 ;General Description:
                 ;This module implements the C-part of the USB driver. See usbdrv.h for a
                 ;documentation of the entire driver.
                 ;*/
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;/* raw USB registers / interface to assembler code: */
                 ;uchar usbRxBuf[2*USB_BUFSIZE];  /* raw RX buffer: PID, 8 bytes data, 2 bytes CRC */
                 ;uchar       usbInputBufOffset;  /* offset in usbRxBuf used for low level receiving */
                 ;uchar       usbDeviceAddr;      /* assigned during enumeration, defaults to 0 */
                 ;uchar       usbNewDeviceAddr;   /* device ID which should be set after status phase */
                 ;uchar       usbConfiguration;   /* currently selected configuration. Administered by driver, but not used */
                 ;volatile schar usbRxLen;        /* = 0; number of bytes in usbRxBuf; 0 means free, -1 for flow control */
                 ;uchar       usbCurrentTok;      /* last token received or endpoint number for last OUT token if != 0 */
                 ;uchar       usbRxToken;         /* token for data we received; or endpont number for last OUT */
                 ;volatile uchar usbTxLen = USBPID_NAK;   /* number of bytes to transmit with next IN token or handshake token */
                 
                 	.DSEG
                 ;uchar       usbTxBuf[USB_BUFSIZE];/* data to transmit with next IN, free if usbTxLen contains handshake token */
                 ;#if USB_COUNT_SOF
                 ;volatile uchar  usbSofCount;    /* incremented by assembler module every SOF */
                 ;#endif
                 ;#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
                 ;usbTxStatus_t  usbTxStatus1;
                 ;#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
                 ;usbTxStatus_t  usbTxStatus3;
                 ;#   endif
                 ;#endif
                 ;#if USB_CFG_CHECK_DATA_TOGGLING
                 ;uchar       usbCurrentDataToken;/* when we check data toggling to ignore duplicate packets */
                 ;#endif
                 ;
                 ;/* USB status registers / not shared with asm code */
                 ;usbMsgPtr_t         usbMsgPtr;      /* data to transmit next -- ROM or RAM address */
                 ;static usbMsgLen_t  usbMsgLen = USB_NO_MSG; /* remaining number of bytes */
                 ;static uchar        usbMsgFlags;    /* flag values see below */
                 ;
                 ;#define USB_FLG_MSGPTR_IS_ROM   (1<<6)
                 ;#define USB_FLG_USE_USER_RW     (1<<7)
                 ;
                 ;/*
                 ;optimizing hints:
                 ;- do not post/pre inc/dec integer values in operations
                 ;- assign value of USB_READ_FLASH() to register variables and don't use side effects in arg
                 ;- use narrow scope for variables which should be in X/Y/Z register
                 ;- assign char sized expressions to variables to force 8 bit arithmetics
                 ;*/
                 ;
                 ;/* -------------------------- String Descriptors --------------------------- */
                 ;
                 ;#if USB_CFG_DESCR_PROPS_STRINGS == 0
                 ;
                 ;#if USB_CFG_DESCR_PROPS_STRING_0 == 0
                 ;#undef USB_CFG_DESCR_PROPS_STRING_0
                 ;#define USB_CFG_DESCR_PROPS_STRING_0    sizeof(usbDescriptorString0)
                 ;PROGMEM const char usbDescriptorString0[] = { /* language descriptor */
                 ;    4,          /* sizeof(usbDescriptorString0): length of descriptor in bytes */
                 ;    3,          /* descriptor type */
                 ;    0x09, 0x04, /* language index (0x0409 = US-English) */
                 ;};
                 ;#endif
                 ;
                 ;#if USB_CFG_DESCR_PROPS_STRING_VENDOR == 0 && USB_CFG_VENDOR_NAME_LEN
                 ;#undef USB_CFG_DESCR_PROPS_STRING_VENDOR
                 ;#define USB_CFG_DESCR_PROPS_STRING_VENDOR   sizeof(usbDescriptorStringVendor)
                 ;PROGMEM const int  usbDescriptorStringVendor[] = {
                 ;    USB_STRING_DESCRIPTOR_HEADER(USB_CFG_VENDOR_NAME_LEN),
                 ;    USB_CFG_VENDOR_NAME
                 ;};
                 ;#endif
                 ;
                 ;#if USB_CFG_DESCR_PROPS_STRING_PRODUCT == 0 && USB_CFG_DEVICE_NAME_LEN
                 ;#undef USB_CFG_DESCR_PROPS_STRING_PRODUCT
                 ;#define USB_CFG_DESCR_PROPS_STRING_PRODUCT   sizeof(usbDescriptorStringDevice)
                 ;PROGMEM const int  usbDescriptorStringDevice[] = {
                 ;    USB_STRING_DESCRIPTOR_HEADER(USB_CFG_DEVICE_NAME_LEN),
                 ;    USB_CFG_DEVICE_NAME
                 ;};
                 ;#endif
                 ;
                 ;#if USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER == 0 && USB_CFG_SERIAL_NUMBER_LEN
                 ;#undef USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER
                 ;#define USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER    sizeof(usbDescriptorStringSerialNumber)
                 ;PROGMEM const int usbDescriptorStringSerialNumber[] = {
                 ;    USB_STRING_DESCRIPTOR_HEADER(USB_CFG_SERIAL_NUMBER_LEN),
                 ;    USB_CFG_SERIAL_NUMBER
                 ;};
                 ;#endif
                 ;
                 ;#endif  /* USB_CFG_DESCR_PROPS_STRINGS == 0 */
                 ;
                 ;/* --------------------------- Device Descriptor --------------------------- */
                 ;
                 ;#if USB_CFG_DESCR_PROPS_DEVICE == 0
                 ;#undef USB_CFG_DESCR_PROPS_DEVICE
                 ;#define USB_CFG_DESCR_PROPS_DEVICE  sizeof(usbDescriptorDevice)
                 ;PROGMEM const char usbDescriptorDevice[] = {    /* USB device descriptor */
                 ;    18,         /* sizeof(usbDescriptorDevice): length of descriptor in bytes */
                 ;    USBDESCR_DEVICE,        /* descriptor type */
                 ;    0x10, 0x01,             /* USB version supported */
                 ;    USB_CFG_DEVICE_CLASS,
                 ;    USB_CFG_DEVICE_SUBCLASS,
                 ;    0,                      /* protocol */
                 ;    8,                      /* max packet size */
                 ;    /* the following two casts affect the first byte of the constant only, but
                 ;     * that's sufficient to avoid a warning with the default values.
                 ;     */
                 ;    (char)USB_CFG_VENDOR_ID,/* 2 bytes */
                 ;    (char)USB_CFG_DEVICE_ID,/* 2 bytes */
                 ;    USB_CFG_DEVICE_VERSION, /* 2 bytes */
                 ;    USB_CFG_DESCR_PROPS_STRING_VENDOR != 0 ? 1 : 0,         /* manufacturer string index */
                 ;    USB_CFG_DESCR_PROPS_STRING_PRODUCT != 0 ? 2 : 0,        /* product string index */
                 ;    USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER != 0 ? 3 : 0,  /* serial number string index */
                 ;    1,          /* number of configurations */
                 ;};
                 ;#endif
                 ;
                 ;/* ----------------------- Configuration Descriptor ------------------------ */
                 ;
                 ;#if USB_CFG_DESCR_PROPS_HID_REPORT != 0 && USB_CFG_DESCR_PROPS_HID == 0
                 ;#undef USB_CFG_DESCR_PROPS_HID
                 ;#define USB_CFG_DESCR_PROPS_HID     9   /* length of HID descriptor in config descriptor below */
                 ;#endif
                 ;
                 ;#if USB_CFG_DESCR_PROPS_CONFIGURATION == 0
                 ;#undef USB_CFG_DESCR_PROPS_CONFIGURATION
                 ;#define USB_CFG_DESCR_PROPS_CONFIGURATION   sizeof(usbDescriptorConfiguration)
                 ;PROGMEM const char usbDescriptorConfiguration[] = {    /* USB configuration descriptor */
                 ;    9,          /* sizeof(usbDescriptorConfiguration): length of descriptor in bytes */
                 ;    USBDESCR_CONFIG,    /* descriptor type */
                 ;    18 + 7 * USB_CFG_HAVE_INTRIN_ENDPOINT + 7 * USB_CFG_HAVE_INTRIN_ENDPOINT3 +
                 ;                (USB_CFG_DESCR_PROPS_HID & 0xff), 0,
                 ;                /* total length of data returned (including inlined descriptors) */
                 ;    1,          /* number of interfaces in this configuration */
                 ;    1,          /* index of this configuration */
                 ;    0,          /* configuration name string index */
                 ;#if USB_CFG_IS_SELF_POWERED
                 ;    (1 << 7) | USBATTR_SELFPOWER,       /* attributes */
                 ;#else
                 ;    (1 << 7),                           /* attributes */
                 ;#endif
                 ;    USB_CFG_MAX_BUS_POWER/2,            /* max USB current in 2mA units */
                 ;/* interface descriptor follows inline: */
                 ;    9,          /* sizeof(usbDescrInterface): length of descriptor in bytes */
                 ;    USBDESCR_INTERFACE, /* descriptor type */
                 ;    0,          /* index of this interface */
                 ;    0,          /* alternate setting for this interface */
                 ;    USB_CFG_HAVE_INTRIN_ENDPOINT + USB_CFG_HAVE_INTRIN_ENDPOINT3, /* endpoints excl 0: number of endpoint descriptors to ...
                 ;    USB_CFG_INTERFACE_CLASS,
                 ;    USB_CFG_INTERFACE_SUBCLASS,
                 ;    USB_CFG_INTERFACE_PROTOCOL,
                 ;    0,          /* string index for interface */
                 ;#if (USB_CFG_DESCR_PROPS_HID & 0xff)    /* HID descriptor */
                 ;    9,          /* sizeof(usbDescrHID): length of descriptor in bytes */
                 ;    USBDESCR_HID,   /* descriptor type: HID */
                 ;    0x01, 0x01, /* BCD representation of HID version */
                 ;    0x00,       /* target country code */
                 ;    0x01,       /* number of HID Report (or other HID class) Descriptor infos to follow */
                 ;    0x22,       /* descriptor type: report */
                 ;    USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH, 0,  /* total length of report descriptor */
                 ;#endif
                 ;#if USB_CFG_HAVE_INTRIN_ENDPOINT    /* endpoint descriptor for endpoint 1 */
                 ;    7,          /* sizeof(usbDescrEndpoint) */
                 ;    USBDESCR_ENDPOINT,  /* descriptor type = endpoint */
                 ;    (char)0x81, /* IN endpoint number 1 */
                 ;    0x03,       /* attrib: Interrupt endpoint */
                 ;    8, 0,       /* maximum packet size */
                 ;    USB_CFG_INTR_POLL_INTERVAL, /* in ms */
                 ;#endif
                 ;#if USB_CFG_HAVE_INTRIN_ENDPOINT3   /* endpoint descriptor for endpoint 3 */
                 ;    7,          /* sizeof(usbDescrEndpoint) */
                 ;    USBDESCR_ENDPOINT,  /* descriptor type = endpoint */
                 ;    (char)(0x80 | USB_CFG_EP3_NUMBER), /* IN endpoint number 3 */
                 ;    0x03,       /* attrib: Interrupt endpoint */
                 ;    8, 0,       /* maximum packet size */
                 ;    USB_CFG_INTR_POLL_INTERVAL, /* in ms */
                 ;#endif
                 ;};
                 ;#endif
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;static inline void  usbResetDataToggling(void)
                 ; 0000 0006 {
                 ;#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
                 ;    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
                 ;#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
                 ;    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
                 ;#   endif
                 ;#endif
                 ;}
                 ;
                 ;static inline void  usbResetStall(void)
                 ;{
                 ;#if USB_CFG_IMPLEMENT_HALT && USB_CFG_HAVE_INTRIN_ENDPOINT
                 ;        usbTxLen1 = USBPID_NAK;
                 ;#if USB_CFG_HAVE_INTRIN_ENDPOINT3
                 ;        usbTxLen3 = USBPID_NAK;
                 ;#endif
                 ;#endif
                 ;}
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;#if !USB_CFG_SUPPRESS_INTR_CODE
                 ;#if USB_CFG_HAVE_INTRIN_ENDPOINT
                 ;static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
                 ;{
                 
                 	.CSEG
                 ;uchar   *p;
                 ;char    i;
                 ;
                 ;#if USB_CFG_IMPLEMENT_HALT
                 ;    if(usbTxLen1 == USBPID_STALL)
                 ;        return;
                 ;#endif
                 ;    if(txStatus->len & 0x10){   /* packet buffer was empty */
                 ;	*data -> Y+7
                 ;	len -> Y+6
                 ;	*txStatus -> Y+4
                 ;	*p -> R16,R17
                 ;	i -> R19
                 ;        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
                 ;    }else{
                 ;        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
                 ;    }
                 ;    p = txStatus->buffer + 1;
                 ;    i = len;
                 ;    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
                 ;        *p++ = *data++;
                 ;    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
                 ;    usbCrc16Append(&txStatus->buffer[1], len);
                 ;    txStatus->len = len + 4;    /* len must be given including sync byte */
                 ;    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
                 ;}
                 ;
                 ;USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
                 ;{
                 ;    usbGenericSetInterrupt(data, len, &usbTxStatus1);
                 ;	*data -> Y+1
                 ;	len -> Y+0
                 ;}
                 ;#endif
                 ;
                 ;#if USB_CFG_HAVE_INTRIN_ENDPOINT3
                 ;USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
                 ;{
                 ;    usbGenericSetInterrupt(data, len, &usbTxStatus3);
                 ;}
                 ;#endif
                 ;#endif /* USB_CFG_SUPPRESS_INTR_CODE */
                 ;
                 ;/* ------------------ utilities for code following below ------------------- */
                 ;
                 ;/* Use defines for the switch statement so that we can choose between an
                 ; * if()else if() and a switch/case based implementation. switch() is more
                 ; * efficient for a LARGE set of sequential choices, if() is better in all other
                 ; * cases.
                 ; */
                 ;#if USB_CFG_USE_SWITCH_STATEMENT
                 ;#   define SWITCH_START(cmd)       switch(cmd){{
                 ;#   define SWITCH_CASE(value)      }break; case (value):{
                 ;#   define SWITCH_CASE2(v1,v2)     }break; case (v1): case(v2):{
                 ;#   define SWITCH_CASE3(v1,v2,v3)  }break; case (v1): case(v2): case(v3):{
                 ;#   define SWITCH_DEFAULT          }break; default:{
                 ;#   define SWITCH_END              }}
                 ;#else
                 ;#   define SWITCH_START(cmd)       {uchar _cmd = cmd; if(0){
                 ;#   define SWITCH_CASE(value)      }else if(_cmd == (value)){
                 ;#   define SWITCH_CASE2(v1,v2)     }else if(_cmd == (v1) || _cmd == (v2)){
                 ;#   define SWITCH_CASE3(v1,v2,v3)  }else if(_cmd == (v1) || _cmd == (v2) || (_cmd == v3)){
                 ;#   define SWITCH_DEFAULT          }else{
                 ;#   define SWITCH_END              }}
                 ;#endif
                 ;
                 ;#ifndef USB_RX_USER_HOOK
                 ;#define USB_RX_USER_HOOK(data, len)
                 ;#endif
                 ;#ifndef USB_SET_ADDRESS_HOOK
                 ;#define USB_SET_ADDRESS_HOOK()
                 ;#endif
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;/* We use if() instead of #if in the macro below because #if can't be used
                 ; * in macros and the compiler optimizes constant conditions anyway.
                 ; * This may cause problems with undefined symbols if compiled without
                 ; * optimizing!
                 ; */
                 ;#define GET_DESCRIPTOR(cfgProp, staticName)         \
                 ;    if(cfgProp){                                    \
                 ;        if((cfgProp) & USB_PROP_IS_RAM)             \
                 ;            flags = 0;                              \
                 ;        if((cfgProp) & USB_PROP_IS_DYNAMIC){        \
                 ;            len = usbFunctionDescriptor(rq);        \
                 ;        }else{                                      \
                 ;            len = USB_PROP_LENGTH(cfgProp);         \
                 ;            usbMsgPtr = (usbMsgPtr_t)(staticName);  \
                 ;        }                                           \
                 ;    }
                 ;
                 ;/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
                 ; * internally for all types of descriptors.
                 ; */
                 ;static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
                 ;{
                 ;usbMsgLen_t len = 0;
                 ;uchar       flags = USB_FLG_MSGPTR_IS_ROM;
                 ;
                 ;    SWITCH_START(rq->wValue.bytes[1])
                 ;	*rq -> Y+2
                 ;	len -> R17
                 ;	flags -> R16
                 ;    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
                 ;        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
                 ;    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
                 ;        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
                 ;    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
                 ;#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
                 ;        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
                 ;            flags = 0;
                 ;        len = usbFunctionDescriptor(rq);
                 ;#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
                 ;        SWITCH_START(rq->wValue.bytes[0])
                 ;        SWITCH_CASE(0)
                 ;            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
                 ;        SWITCH_CASE(1)
                 ;            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
                 ;        SWITCH_CASE(2)
                 ;            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
                 ;        SWITCH_CASE(3)
                 ;            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
                 ;        SWITCH_DEFAULT
                 ;            if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
                 ;                len = usbFunctionDescriptor(rq);
                 ;            }
                 ;        SWITCH_END
                 ;#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
                 ;#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
                 ;    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
                 ;        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
                 ;    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
                 ;        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
                 ;#endif
                 ;    SWITCH_DEFAULT
                 ;        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
                 ;            len = usbFunctionDescriptor(rq);
                 ;        }
                 ;    SWITCH_END
                 ;    usbMsgFlags = flags;
                 ;    return len;
                 ;}
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
                 ; * standard requests instead of class and custom requests.
                 ; */
                 ;static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
                 ;{
                 ;usbMsgLen_t len = 0;
                 ;uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
                 ;uchar   value = rq->wValue.bytes[0];
                 ;#if USB_CFG_IMPLEMENT_HALT
                 ;uchar   index = rq->wIndex.bytes[0];
                 ;#endif
                 ;
                 ;    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
                 ;	*rq -> Y+4
                 ;	len -> R17
                 ;	*dataPtr -> R18,R19
                 ;	value -> R16
                 ;    SWITCH_START(rq->bRequest)
                 ;    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
                 ;        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
                 ;        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
                 ;	*rq -> Y+5
                 ;	recipient -> Y+0
                 ;            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
                 ;#if USB_CFG_IMPLEMENT_HALT
                 ;        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
                 ;            dataPtr[0] = usbTxLen1 == USBPID_STALL;
                 ;#endif
                 ;        dataPtr[1] = 0;
                 ;        len = 2;
                 ;#if USB_CFG_IMPLEMENT_HALT
                 ;    SWITCH_CASE2(USBRQ_CLEAR_FEATURE, USBRQ_SET_FEATURE)    /* 1, 3 */
                 ;        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
                 ;            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
                 ;            usbResetDataToggling();
                 ;        }
                 ;#endif
                 ;    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
                 ;        usbNewDeviceAddr = value;
                 ;        USB_SET_ADDRESS_HOOK();
                 ;    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
                 ;        len = usbDriverDescriptor(rq);
                 ;        goto skipMsgPtrAssignment;
                 ;    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
                 ;        dataPtr = &usbConfiguration;  /* send current configuration value */
                 ;        len = 1;
                 ;    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
                 ;        usbConfiguration = value;
                 ;        usbResetStall();
                 ;    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
                 ;        len = 1;
                 ;#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
                 ;    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
                 ;        usbResetDataToggling();
                 ;        usbResetStall();
                 ;#endif
                 ;    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
                 ;        /* Should we add an optional hook here? */
                 ;    SWITCH_END
                 ;    usbMsgPtr = (usbMsgPtr_t)dataPtr;
                 ;skipMsgPtrAssignment:
                 ;    return len;
                 ;}
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;/* usbProcessRx() is called for every message received by the interrupt
                 ; * routine. It distinguishes between SETUP and DATA packets and processes
                 ; * them accordingly.
                 ; */
                 ;static inline void usbProcessRx(uchar *data, uchar len)
                 ;{
                 ;usbRequest_t    *rq = (void *)data;
                 ;
                 ;/* usbRxToken can be:
                 ; * 0x2d 00101101 (USBPID_SETUP for setup data)
                 ; * 0xe1 11100001 (USBPID_OUT: data phase of setup transfer)
                 ; * 0...0x0f for OUT on endpoint X
                 ; */
                 ;    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
                 ;    USB_RX_USER_HOOK(data, len)
                 ;#if USB_CFG_IMPLEMENT_FN_WRITEOUT
                 ;    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
                 ;        usbFunctionWriteOut(data, len);
                 ;        return;
                 ;    }
                 ;#endif
                 ;    if(usbRxToken == (uchar)USBPID_SETUP){
                 ;	*data -> Y+3
                 ;	len -> Y+2
                 ;	*rq -> R16,R17
                 ;        usbMsgLen_t replyLen;
                 ;        uchar type;
                 ;        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
                 ;	*data -> Y+5
                 ;	len -> Y+4
                 ;	replyLen -> Y+1
                 ;	type -> Y+0
                 ;            return;
                 ;        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
                 ;        usbTxLen = USBPID_NAK;              /* abort pending transmit */
                 ;        usbMsgFlags = 0;
                 ;        type = rq->bmRequestType & USBRQ_TYPE_MASK;
                 ;        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
                 ;            replyLen = usbFunctionSetup(data);
                 ;        }else{
                 ;            replyLen = usbDriverSetup(rq);
                 ;        }
                 ;#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
                 ;        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
                 ;            /* do some conditioning on replyLen, but on IN transfers only */
                 ;            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
                 ;                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                 ;                    replyLen = rq->wLength.bytes[0];
                 ;                }else{
                 ;                    replyLen = rq->wLength.word;
                 ;                }
                 ;            }
                 ;            usbMsgFlags = USB_FLG_USE_USER_RW;
                 ;        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
                 ;#endif
                 ;        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                 ;            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
                 ;                replyLen = rq->wLength.bytes[0];
                 ;        }else{
                 ;            if(replyLen > rq->wLength.word)     /* limit length to max */
                 ;                replyLen = rq->wLength.word;
                 ;        }
                 ;        usbMsgLen = replyLen;
                 ;    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
                 ;#if USB_CFG_IMPLEMENT_FN_WRITE
                 ;        if(usbMsgFlags & USB_FLG_USE_USER_RW){
                 ;            uchar rval = usbFunctionWrite(data, len);
                 ;            if(rval == 0xff){   /* an error occurred */
                 ;	*data -> Y+4
                 ;	len -> Y+3
                 ;	rval -> Y+0
                 ;                usbTxLen = USBPID_STALL;
                 ;            }else if(rval != 0){    /* This was the final package */
                 ;                usbMsgLen = 0;  /* answer with a zero-sized data packet */
                 ;            }
                 ;        }
                 ;#endif
                 ;    }
                 ;}
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;/* This function is similar to usbFunctionRead(), but it's also called for
                 ; * data handled automatically by the driver (e.g. descriptor reads).
                 ; */
                 ;static uchar usbDeviceRead(uchar *data, uchar len)
                 ;{
                 _usbDeviceRead_G000:
                 ; .FSTART _usbDeviceRead_G000
                 ;    if(len > 0){    /* don't bother app with 0 sized reads */
0000a5 93aa      	ST   -Y,R26
                 ;	*data -> Y+1
                 ;	len -> Y+0
0000a6 81a8      	LD   R26,Y
0000a7 30a1      	CPI  R26,LOW(0x1)
0000a8 f408      	BRSH PC+2
0000a9 c04d      	RJMP _0x68
                 ;#if USB_CFG_IMPLEMENT_FN_READ
                 ;        if(usbMsgFlags & USB_FLG_USE_USER_RW){
0000aa 91e0 0194 	LDS  R30,_usbMsgFlags_G000
0000ac 78e0      	ANDI R30,LOW(0x80)
0000ad f041      	BREQ _0x69
                 ;            len = usbFunctionRead(data, len);
0000ae 81e9      	LDD  R30,Y+1
0000af 81fa      	LDD  R31,Y+1+1
0000b0 93fa      	ST   -Y,R31
0000b1 93ea      	ST   -Y,R30
0000b2 81aa      	LDD  R26,Y+2
0000b3 d1ae      	RCALL _usbFunctionRead_G000
0000b4 83e8      	ST   Y,R30
                 ;        }else
0000b5 c041      	RJMP _0x6A
                 _0x69:
                 ;#endif
                 ;        {
                 ;            uchar i = len;
                 ;            usbMsgPtr_t r = usbMsgPtr;
                 ;            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
0000b6 9723      	SBIW R28,3
                 ;	*data -> Y+4
                 ;	len -> Y+3
                 ;	i -> Y+2
                 ;	*r -> Y+0
0000b7 81eb      	LDD  R30,Y+3
0000b8 83ea      	STD  Y+2,R30
0000b9 91e0 0160 	LDS  R30,_usbMsgPtr
0000bb 91f0 0161 	LDS  R31,_usbMsgPtr+1
0000bd 83e8      	ST   Y,R30
0000be 83f9      	STD  Y+1,R31
0000bf 91e0 0194 	LDS  R30,_usbMsgFlags_G000
0000c1 74e0      	ANDI R30,LOW(0x40)
0000c2 f0c1      	BREQ _0x6B
                 ;                do{
                 _0x6D:
                 ;                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
                 ;                    *data++ = c;
0000c3 9721      	SBIW R28,1
                 ;	*data -> Y+5
                 ;	len -> Y+4
                 ;	i -> Y+3
                 ;	*r -> Y+1
                 ;	c -> Y+0
0000c4 81e9      	LDD  R30,Y+1
0000c5 81fa      	LDD  R31,Y+1+1
0000c6 91e4      	LPM  R30,Z
0000c7 83e8      	ST   Y,R30
0000c8 81ed      	LDD  R30,Y+5
0000c9 81fe      	LDD  R31,Y+5+1
0000ca 9631      	ADIW R30,1
0000cb 83ed      	STD  Y+5,R30
0000cc 83fe      	STD  Y+5+1,R31
0000cd 9731      	SBIW R30,1
0000ce 81a8      	LD   R26,Y
0000cf 83a0      	STD  Z+0,R26
                 ;                    r++;
0000d0 81e9      	LDD  R30,Y+1
0000d1 81fa      	LDD  R31,Y+1+1
0000d2 9631      	ADIW R30,1
0000d3 83e9      	STD  Y+1,R30
0000d4 83fa      	STD  Y+1+1,R31
                 ;                }while(--i);
0000d5 9621      	ADIW R28,1
0000d6 81ea      	LDD  R30,Y+2
0000d7 50e1      	SUBI R30,LOW(1)
0000d8 83ea      	STD  Y+2,R30
0000d9 f749      	BRNE _0x6D
                 ;            }else{  /* RAM data */
0000da c015      	RJMP _0x6F
                 _0x6B:
                 ;                do{
                 _0x71:
                 ;                    *data++ = *((uchar *)r);
0000db 81ec      	LDD  R30,Y+4
0000dc 81fd      	LDD  R31,Y+4+1
0000dd 9631      	ADIW R30,1
0000de 83ec      	STD  Y+4,R30
0000df 83fd      	STD  Y+4+1,R31
0000e0 9731      	SBIW R30,1
0000e1 010f      	MOVW R0,R30
0000e2 81a8      	LD   R26,Y
0000e3 81b9      	LDD  R27,Y+1
0000e4 91ec      	LD   R30,X
0000e5 01d0      	MOVW R26,R0
0000e6 93ec      	ST   X,R30
                 ;                    r++;
0000e7 81e8      	LD   R30,Y
0000e8 81f9      	LDD  R31,Y+1
0000e9 9631      	ADIW R30,1
0000ea 83e8      	ST   Y,R30
0000eb 83f9      	STD  Y+1,R31
                 ;                }while(--i);
0000ec 81ea      	LDD  R30,Y+2
0000ed 50e1      	SUBI R30,LOW(1)
0000ee 83ea      	STD  Y+2,R30
0000ef f759      	BRNE _0x71
                 ;            }
                 _0x6F:
                 ;            usbMsgPtr = r;
0000f0 81e8      	LD   R30,Y
0000f1 81f9      	LDD  R31,Y+1
0000f2 93e0 0160 	STS  _usbMsgPtr,R30
0000f4 93f0 0161 	STS  _usbMsgPtr+1,R31
                 ;        }
0000f6 9623      	ADIW R28,3
                 _0x6A:
                 ;    }
                 ;    return len;
                 _0x68:
0000f7 81e8      	LD   R30,Y
0000f8 9623      	ADIW R28,3
0000f9 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;/* usbBuildTxBlock() is called when we have data to transmit and the
                 ; * interrupt routine's transmit buffer is empty.
                 ; */
                 ;static inline void usbBuildTxBlock(void)
                 ;{
                 ;usbMsgLen_t wantLen;
                 ;uchar       len;
                 ;
                 ;    wantLen = usbMsgLen;
                 ;	wantLen -> R17
                 ;	len -> R16
                 ;    if(wantLen > 8)
                 ;        wantLen = 8;
                 ;    usbMsgLen -= wantLen;
                 ;    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
                 ;    len = usbDeviceRead(usbTxBuf + 1, wantLen);
                 ;    if(len <= 8){           /* valid data packet */
                 ;        usbCrc16Append(&usbTxBuf[1], len);
                 ;        len += 4;           /* length including sync byte */
                 ;        if(len < 12)        /* a partial package identifies end of message */
                 ;            usbMsgLen = USB_NO_MSG;
                 ;    }else{
                 ;        len = USBPID_STALL;   /* stall the endpoint */
                 ;        usbMsgLen = USB_NO_MSG;
                 ;    }
                 ;    usbTxLen = len;
                 ;    DBG2(0x20, usbTxBuf, len-1);
                 ;}
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;static inline void usbHandleResetHook(uchar notResetState)
                 ;{
                 ;#ifdef USB_RESET_HOOK
                 ;static uchar    wasReset;
                 ;uchar           isReset = !notResetState;
                 ;
                 ;    if(wasReset != isReset){
                 ;        USB_RESET_HOOK(isReset);
                 ;        wasReset = isReset;
                 ;    }
                 ;#else
                 ;    notResetState = notResetState;  // avoid compiler warning
                 ;	notResetState -> Y+0
                 ;#endif
                 ;}
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;USB_PUBLIC void usbPoll(void)
                 ;{
                 _usbPoll_G000:
                 ; .FSTART _usbPoll_G000
                 ;schar   len;
                 ;uchar   i;
                 ;
                 ;    len = usbRxLen - 3;
0000fa d254      	RCALL __SAVELOCR2
                 ;	len -> R17
                 ;	i -> R16
0000fb 91e0 0186 	LDS  R30,_usbRxLen
0000fd 50e3      	SUBI R30,LOW(3)
0000fe 2f1e      	MOV  R17,R30
                 ;    if(len >= 0){
0000ff 3010      	CPI  R17,0
000100 f40c      	BRGE PC+2
000101 c0be      	RJMP _0x79
                 ;/* We could check CRC16 here -- but ACK has already been sent anyway. If you
                 ; * need data integrity checks with this driver, check the CRC in your app
                 ; * code and report errors back to the host. Since the ACK was already sent,
                 ; * retries must be handled on application level.
                 ; * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
                 ; */
                 ;        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
                +
000102 e7ac     +LDI R26 , LOW ( _usbRxBuf + ( 12 ) )
000103 e0b1     +LDI R27 , HIGH ( _usbRxBuf + ( 12 ) )
                 	__POINTW2MN _usbRxBuf,12
000104 2de5      	MOV  R30,R5
000105 e0f0      	LDI  R31,0
000106 1bae      	SUB  R26,R30
000107 0bbf      	SBC  R27,R31
000108 93ba      	ST   -Y,R27
000109 93aa      	ST   -Y,R26
00010a 2fe1      	MOV  R30,R17
00010b 2fae      	MOV  R26,R30
00010c 93aa      	ST   -Y,R26
00010d d241      	RCALL __SAVELOCR2
                +
00010e 810b     +LDD R16 , Y + 3
00010f 811c     +LDD R17 , Y + 3 + 1
                 	__GETWRS 16,17,3
000110 91a0 0162 	LDS  R26,_usbRxToken
000112 32ad      	CPI  R26,LOW(0x2D)
000113 f009      	BREQ PC+2
000114 c08c      	RJMP _0x400A053
000115 9722      	SBIW R28,2
000116 81ac      	LDD  R26,Y+4
000117 30a8      	CPI  R26,LOW(0x8)
000118 f011      	BREQ _0x400A054
000119 9622      	ADIW R28,2
00011a c0a0      	RJMP _0x400A067
                 _0x400A054:
00011b ece3      	LDI  R30,LOW(195)
00011c 93e0 0188 	STS  _usbTxBuf,R30
00011e e5ea      	LDI  R30,LOW(90)
00011f 93e0 0187 	STS  _usbTxLen,R30
000121 e0e0      	LDI  R30,LOW(0)
000122 93e0 0194 	STS  _usbMsgFlags_G000,R30
000124 01d8      	MOVW R26,R16
000125 81e0      	LD   R30,Z
000126 76e0      	ANDI R30,LOW(0x60)
000127 83e8      	ST   Y,R30
000128 30e0      	CPI  R30,0
000129 f021      	BREQ _0x400A055
00012a 81ad      	LDD  R26,Y+5
00012b 81be      	LDD  R27,Y+5+1
00012c d1a9      	RCALL _usbFunctionSetup_G000
00012d c052      	RJMP _0xAE
                 _0x400A055:
00012e 01d8      	MOVW R26,R16
00012f 93ba      	ST   -Y,R27
000130 93aa      	ST   -Y,R26
000131 d21b      	RCALL __SAVELOCR4
000132 e010      	LDI  R17,0
                +
000133 e921     +LDI R18 , LOW ( _usbTxBuf + ( 9 ) )
000134 e031     +LDI R19 , HIGH ( _usbTxBuf + ( 9 ) )
                 	__POINTWRMN 18,19,_usbTxBuf,9
000135 81ec      	LDD  R30,Y+4
000136 81fd      	LDD  R31,Y+4+1
000137 8102      	LDD  R16,Z+2
000138 01d9      	MOVW R26,R18
000139 e0e0      	LDI  R30,LOW(0)
00013a 93ec      	ST   X,R30
00013b 81ec      	LDD  R30,Y+4
00013c 81fd      	LDD  R31,Y+4+1
00013d 81e1      	LDD  R30,Z+1
00013e e0f0      	LDI  R31,0
00013f c039      	RJMP _0x8003045
                 _0xC00B02A:
                 _0xC00B01F:
000140 c017      	RJMP _0xC00B011
                 _0xC00B01C:
000141 32e1      	CPI  R30,LOW(0x21)
000142 e0a0      	LDI  R26,HIGH(0x21)
000143 07fa      	CPC  R31,R26
000144 f441      	BRNE _0xC00B036
000145 e019      	LDI  R17,LOW(9)
                +
000146 e4ea     +LDI R30 , LOW ( 2 * _usbDescriptorConfiguration + ( 18 ) )
000147 e0f0     +LDI R31 , HIGH ( 2 * _usbDescriptorConfiguration + ( 18 ) )
                 	__POINTW1FN _usbDescriptorConfiguration,18
000148 93e0 0160 	STS  _usbMsgPtr,R30
00014a 93f0 0161 	STS  _usbMsgPtr+1,R31
00014c c00b      	RJMP _0xC00B011
                 _0xC00B036:
00014d 32e2      	CPI  R30,LOW(0x22)
00014e e0a0      	LDI  R26,HIGH(0x22)
00014f 07fa      	CPC  R31,R26
000150 f439      	BRNE _0xC00B040
000151 e116      	LDI  R17,LOW(22)
000152 ebe2      	LDI  R30,LOW(_usbDescriptorHidReport*2)
000153 e0f0      	LDI  R31,HIGH(_usbDescriptorHidReport*2)
000154 93e0 0160 	STS  _usbMsgPtr,R30
000156 93f0 0161 	STS  _usbMsgPtr+1,R31
                 _0xC00B040:
                 _0xC00B011:
000158 9300 0194 	STS  _usbMsgFlags_G000,R16
00015a 2fe1      	MOV  R30,R17
00015b d1f8      	RCALL __LOADLOCR2
00015c 9624      	ADIW R28,4
00015d 2f1e      	MOV  R17,R30
00015e c01e      	RJMP _0x800304C
                 _0x800304B:
00015f 30e8      	CPI  R30,LOW(0x8)
000160 e0a0      	LDI  R26,HIGH(0x8)
000161 07fa      	CPC  R31,R26
000162 f421      	BRNE _0x800304D
                +
000163 e623     +LDI R18 , LOW ( _usbConfiguration )
000164 e031     +LDI R19 , HIGH ( _usbConfiguration )
                 	__POINTWRM 18,19,_usbConfiguration
000165 e011      	LDI  R17,LOW(1)
000166 c012      	RJMP _0x8003045
                 _0x800304D:
000167 30e9      	CPI  R30,LOW(0x9)
000168 e0a0      	LDI  R26,HIGH(0x9)
000169 07fa      	CPC  R31,R26
00016a f419      	BRNE _0x800304E
00016b 9300 0163 	STS  _usbConfiguration,R16
00016d c00b      	RJMP _0x8003045
                 _0x800304E:
00016e 30ea      	CPI  R30,LOW(0xA)
00016f e0a0      	LDI  R26,HIGH(0xA)
000170 07fa      	CPC  R31,R26
000171 f411      	BRNE _0x800304F
000172 e011      	LDI  R17,LOW(1)
000173 c005      	RJMP _0x8003045
                 _0x800304F:
000174 973b      	SBIW R30,11
000175 f419      	BRNE _0x8003051
000176 e4eb      	LDI  R30,LOW(75)
                +
000177 93e0 0165+STS _usbTxStatus1 + ( 1 ) , R30
                 	__PUTB1MN _usbTxStatus1,1
                 _0x8003051:
                 _0x8003045:
                +
000179 9320 0160+STS _usbMsgPtr + ( 0 ) , R18
00017b 9330 0161+STS _usbMsgPtr + ( 0 ) + 1 , R19
                 	__PUTWMRN _usbMsgPtr,0,18,19
                 _0x800304C:
00017d 2fe1      	MOV  R30,R17
00017e d1d3      	RCALL __LOADLOCR4
00017f 9626      	ADIW R28,6
                 _0xAE:
000180 83e9      	STD  Y+1,R30
000181 81a9      	LDD  R26,Y+1
000182 3faf      	CPI  R26,LOW(0xFF)
000183 f459      	BRNE _0x400A057
000184 01d8      	MOVW R26,R16
000185 81e0      	LD   R30,Z
000186 78e0      	ANDI R30,LOW(0x80)
000187 f019      	BREQ _0x400A058
                 _0xAF:
000188 01f8      	MOVW R30,R16
000189 81e6      	LDD  R30,Z+6
00018a 83e9      	STD  Y+1,R30
                 _0x400A058:
00018b e8e0      	LDI  R30,LOW(128)
00018c 93e0 0194 	STS  _usbMsgFlags_G000,R30
00018e c00d      	RJMP _0x400A05B
                 _0x400A057:
00018f 01f8      	MOVW R30,R16
000190 81e7      	LDD  R30,Z+7
000191 30e0      	CPI  R30,0
000192 f429      	BRNE _0x400A05E
000193 01f8      	MOVW R30,R16
000194 81e6      	LDD  R30,Z+6
000195 81a9      	LDD  R26,Y+1
000196 17ea      	CP   R30,R26
000197 f008      	BRLO _0x400A05F
                 _0x400A05E:
000198 c003      	RJMP _0x400A05D
                 _0x400A05F:
000199 01f8      	MOVW R30,R16
00019a 81e6      	LDD  R30,Z+6
00019b 83e9      	STD  Y+1,R30
                 _0x400A05D:
                 _0x400A05B:
00019c 81e9      	LDD  R30,Y+1
00019d 93e0 0193 	STS  _usbMsgLen_G000,R30
00019f 9622      	ADIW R28,2
0001a0 c01a      	RJMP _0x400A062
                 _0x400A053:
0001a1 91e0 0194 	LDS  R30,_usbMsgFlags_G000
0001a3 78e0      	ANDI R30,LOW(0x80)
0001a4 f0b1      	BREQ _0x400A063
0001a5 9721      	SBIW R28,1
0001a6 81ec      	LDD  R30,Y+4
0001a7 81fd      	LDD  R31,Y+4+1
0001a8 93fa      	ST   -Y,R31
0001a9 93ea      	ST   -Y,R30
0001aa 81ad      	LDD  R26,Y+5
0001ab d0ef      	RCALL _usbFunctionWrite_G000
0001ac 83e8      	ST   Y,R30
0001ad 81a8      	LD   R26,Y
0001ae 3faf      	CPI  R26,LOW(0xFF)
0001af f421      	BRNE _0x400A064
0001b0 e1ee      	LDI  R30,LOW(30)
0001b1 93e0 0187 	STS  _usbTxLen,R30
0001b3 c006      	RJMP _0x400A065
                 _0x400A064:
0001b4 81e8      	LD   R30,Y
0001b5 30e0      	CPI  R30,0
0001b6 f019      	BREQ _0x400A066
0001b7 e0e0      	LDI  R30,LOW(0)
0001b8 93e0 0193 	STS  _usbMsgLen_G000,R30
                 _0x400A066:
                 _0x400A065:
0001ba 9621      	ADIW R28,1
                 _0x400A063:
                 _0x400A062:
                 _0x400A067:
0001bb d198      	RCALL __LOADLOCR2
0001bc 9625      	ADIW R28,5
                 ;#if USB_CFG_HAVE_FLOWCONTROL
                 ;        if(usbRxLen > 0)    /* only mark as available if not inactivated */
                 ;            usbRxLen = 0;
                 ;#else
                 ;        usbRxLen = 0;       /* mark rx buffer as available */
0001bd e0e0      	LDI  R30,LOW(0)
0001be 93e0 0186 	STS  _usbRxLen,R30
                 ;#endif
                 ;    }
                 ;    if(usbTxLen & 0x10){    /* transmit system idle */
                 _0x79:
0001c0 91e0 0187 	LDS  R30,_usbTxLen
0001c2 71e0      	ANDI R30,LOW(0x10)
0001c3 f199      	BREQ _0x7A
                 ;        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
0001c4 91a0 0193 	LDS  R26,_usbMsgLen_G000
0001c6 3faf      	CPI  R26,LOW(0xFF)
0001c7 f179      	BREQ _0x7B
                 ;            usbBuildTxBlock();
0001c8 d186      	RCALL __SAVELOCR2
0001c9 9110 0193 	LDS  R17,_usbMsgLen_G000
0001cb 3019      	CPI  R17,9
0001cc f008      	BRLO _0x400C074
0001cd e018      	LDI  R17,LOW(8)
                 _0x400C074:
0001ce 91e0 0193 	LDS  R30,_usbMsgLen_G000
0001d0 1be1      	SUB  R30,R17
0001d1 93e0 0193 	STS  _usbMsgLen_G000,R30
0001d3 91a0 0188 	LDS  R26,_usbTxBuf
0001d5 e8e8      	LDI  R30,LOW(136)
0001d6 27ea      	EOR  R30,R26
0001d7 93e0 0188 	STS  _usbTxBuf,R30
                +
0001d9 e8e9     +LDI R30 , LOW ( _usbTxBuf + ( 1 ) )
0001da e0f1     +LDI R31 , HIGH ( _usbTxBuf + ( 1 ) )
                 	__POINTW1MN _usbTxBuf,1
0001db 93fa      	ST   -Y,R31
0001dc 93ea      	ST   -Y,R30
0001dd 2fa1      	MOV  R26,R17
0001de dec6      	RCALL _usbDeviceRead_G000
0001df 2f0e      	MOV  R16,R30
0001e0 3009      	CPI  R16,9
0001e1 f468      	BRSH _0x400C075
                +
0001e2 e8e9     +LDI R30 , LOW ( _usbTxBuf + ( 1 ) )
0001e3 e0f1     +LDI R31 , HIGH ( _usbTxBuf + ( 1 ) )
                 	__POINTW1MN _usbTxBuf,1
0001e4 93fa      	ST   -Y,R31
0001e5 93ea      	ST   -Y,R30
0001e6 2fa0      	MOV  R26,R16
0001e7 debb      	RCALL _usbCrc16Append
0001e8 5f0c      	SUBI R16,-LOW(4)
0001e9 300c      	CPI  R16,12
0001ea f418      	BRSH _0x400C076
0001eb efef      	LDI  R30,LOW(255)
0001ec 93e0 0193 	STS  _usbMsgLen_G000,R30
                 _0x400C076:
0001ee c004      	RJMP _0x400C077
                 _0x400C075:
0001ef e10e      	LDI  R16,LOW(30)
0001f0 efef      	LDI  R30,LOW(255)
0001f1 93e0 0193 	STS  _usbMsgLen_G000,R30
                 _0x400C077:
0001f3 9300 0187 	STS  _usbTxLen,R16
0001f5 9109      	LD   R16,Y+
0001f6 9119      	LD   R17,Y+
                 ;        }
                 ;    }
                 _0x7B:
                 ;    for(i = 20; i > 0; i--){
                 _0x7A:
0001f7 e104      	LDI  R16,LOW(20)
                 _0x7D:
0001f8 3001      	CPI  R16,1
0001f9 f048      	BRLO _0x7E
                 ;        uchar usbLineStatus = USBIN & USBMASK;
                 ;        if(usbLineStatus != 0){  /* SE0 has ended */
0001fa 9721      	SBIW R28,1
                 ;	usbLineStatus -> Y+0
0001fb b3e0      	IN   R30,0x10
0001fc 71e4      	ANDI R30,LOW(0x14)
0001fd 83e8      	ST   Y,R30
0001fe 30e0      	CPI  R30,0
0001ff f429      	BRNE _0x80
                 ;            goto isNotReset;   }
                 ;    }
000200 9621      	ADIW R28,1
000201 5001      	SUBI R16,1
000202 cff5      	RJMP _0x7D
                 _0x7E:
                 ;    /* RESET condition, called multiple times during reset */
                 ;    usbNewDeviceAddr = 0;
000203 2477      	CLR  R7
                 ;    usbDeviceAddr = 0;
000204 2444      	CLR  R4
                 ;    usbResetStall();
                 ;    DBG1(0xff, 0, 0);
                 ;isNotReset:
                 _0x80:
                 ;    usbHandleResetHook(i);
000205 2fa0      	MOV  R26,R16
000206 93aa      	ST   -Y,R26
000207 81e8      	LD   R30,Y
000208 83e8      	ST   Y,R30
000209 9621      	ADIW R28,1
                 ;}
00020a 9109      	LD   R16,Y+
00020b 9119      	LD   R17,Y+
00020c 9508      	RET
                 ; .FEND
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;USB_PUBLIC void usbInit(void)
                 ;{
                 _usbInit_G000:
                 ; .FSTART _usbInit_G000
                 ;#if USB_INTR_CFG_SET != 0
                 ;    USB_INTR_CFG |= USB_INTR_CFG_SET;
00020d b7e5      	IN   R30,0x35
00020e 60e2      	ORI  R30,2
00020f bfe5      	OUT  0x35,R30
                 ;#endif
                 ;#if USB_INTR_CFG_CLR != 0
                 ;    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
                 ;#endif
                 ;    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
000210 b7eb      	IN   R30,0x3B
000211 64e0      	ORI  R30,0x40
000212 bfeb      	OUT  0x3B,R30
                 ;    usbResetDataToggling();
000213 e4eb      	LDI  R30,LOW(75)
                +
000214 93e0 0165+STS _usbTxStatus1 + ( 1 ) , R30
                 	__PUTB1MN _usbTxStatus1,1
                 ;#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
                 ;    usbTxLen1 = USBPID_NAK;
000216 e5ea      	LDI  R30,LOW(90)
000217 93e0 0164 	STS  _usbTxStatus1,R30
                 ;#if USB_CFG_HAVE_INTRIN_ENDPOINT3
                 ;    usbTxLen3 = USBPID_NAK;
                 ;#endif
                 ;#endif
                 ;}
000219 9508      	RET
                 ; .FEND
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;uchar button;
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 000B {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
00021a 93ea      	ST   -Y,R30
                 ; 0000 000C uchar T;
                 ; 0000 000D #asm ("sei");
00021b 931a      	ST   -Y,R17
                 ;	T -> R17
00021c 9478      	sei
                 ; 0000 000E 
                 ; 0000 000F TCNT1H=0x6D84 >> 8;
00021d e6ed      	LDI  R30,LOW(109)
00021e bded      	OUT  0x2D,R30
                 ; 0000 0010 TCNT1L=0x6D84 & 0xff;
00021f e8e4      	LDI  R30,LOW(132)
000220 bdec      	OUT  0x2C,R30
                 ; 0000 0011 
                 ; 0000 0012     DDRC  = 0b111;
000221 e0e7      	LDI  R30,LOW(7)
000222 bbe4      	OUT  0x14,R30
                 ; 0000 0013     PORTC = 0b110;
000223 e0e6      	LDI  R30,LOW(6)
000224 bbe5      	OUT  0x15,R30
                 ; 0000 0014     #asm ("NOP")
000225 0000      	NOP
                 ; 0000 0015     T = PINB;
000226 b316      	IN   R17,22
                 ; 0000 0016     if ((T & 0b00001000) == 0) button = '*';
000227 fd13      	SBRC R17,3
000228 c002      	RJMP _0x81
000229 e2ea      	LDI  R30,LOW(42)
00022a c00b      	RJMP _0xB0
                 ; 0000 0017     else if ((T & 0b00000100) == 0) button = '7';
                 _0x81:
00022b fd12      	SBRC R17,2
00022c c002      	RJMP _0x83
00022d e3e7      	LDI  R30,LOW(55)
00022e c007      	RJMP _0xB0
                 ; 0000 0018     else if ((T & 0b00000010) == 0) button = '4';
                 _0x83:
00022f fd11      	SBRC R17,1
000230 c002      	RJMP _0x85
000231 e3e4      	LDI  R30,LOW(52)
000232 c003      	RJMP _0xB0
                 ; 0000 0019     else if ((T & 0b00000001) == 0) button = '1';
                 _0x85:
000233 fd10      	SBRC R17,0
000234 c002      	RJMP _0x87
000235 e3e1      	LDI  R30,LOW(49)
                 _0xB0:
000236 2e9e      	MOV  R9,R30
                 ; 0000 001A 
                 ; 0000 001B     PORTC = 0b101;
                 _0x87:
000237 e0e5      	LDI  R30,LOW(5)
000238 bbe5      	OUT  0x15,R30
                 ; 0000 001C     #asm ("NOP")
000239 0000      	NOP
                 ; 0000 001D     T = PINB;
00023a b316      	IN   R17,22
                 ; 0000 001E     if ((T & 0b00001000) == 0) button = '0';
00023b fd13      	SBRC R17,3
00023c c002      	RJMP _0x88
00023d e3e0      	LDI  R30,LOW(48)
00023e c00b      	RJMP _0xB1
                 ; 0000 001F     else if ((T & 0b00000100) == 0) button = '8';
                 _0x88:
00023f fd12      	SBRC R17,2
000240 c002      	RJMP _0x8A
000241 e3e8      	LDI  R30,LOW(56)
000242 c007      	RJMP _0xB1
                 ; 0000 0020     else if ((T & 0b00000010) == 0) button = '5';
                 _0x8A:
000243 fd11      	SBRC R17,1
000244 c002      	RJMP _0x8C
000245 e3e5      	LDI  R30,LOW(53)
000246 c003      	RJMP _0xB1
                 ; 0000 0021     else if ((T & 0b00000001) == 0) button = '2';
                 _0x8C:
000247 fd10      	SBRC R17,0
000248 c002      	RJMP _0x8E
000249 e3e2      	LDI  R30,LOW(50)
                 _0xB1:
00024a 2e9e      	MOV  R9,R30
                 ; 0000 0022 
                 ; 0000 0023     PORTC = 0b011;
                 _0x8E:
00024b e0e3      	LDI  R30,LOW(3)
00024c bbe5      	OUT  0x15,R30
                 ; 0000 0024     #asm ("NOP")
00024d 0000      	NOP
                 ; 0000 0025     T = PINB;
00024e b316      	IN   R17,22
                 ; 0000 0026     if ((T & 0b00001000) == 0) button = '#';
00024f fd13      	SBRC R17,3
000250 c002      	RJMP _0x8F
000251 e2e3      	LDI  R30,LOW(35)
000252 c00b      	RJMP _0xB2
                 ; 0000 0027     else if ((T & 0b00000100) == 0) button = '9';
                 _0x8F:
000253 fd12      	SBRC R17,2
000254 c002      	RJMP _0x91
000255 e3e9      	LDI  R30,LOW(57)
000256 c007      	RJMP _0xB2
                 ; 0000 0028     else if ((T & 0b00000010) == 0) button = '6';
                 _0x91:
000257 fd11      	SBRC R17,1
000258 c002      	RJMP _0x93
000259 e3e6      	LDI  R30,LOW(54)
00025a c003      	RJMP _0xB2
                 ; 0000 0029     else if ((T & 0b00000001) == 0) button = '3';
                 _0x93:
00025b fd10      	SBRC R17,0
00025c c002      	RJMP _0x95
00025d e3e3      	LDI  R30,LOW(51)
                 _0xB2:
00025e 2e9e      	MOV  R9,R30
                 ; 0000 002A }
                 _0x95:
00025f 9119      	LD   R17,Y+
000260 91e9      	LD   R30,Y+
000261 9518      	RETI
                 ; .FEND
                 ;
                 ;struct dataexchange_t       // Описание структуры для передачи данных
                 ;{
                 ;   uchar b1;        // Я решил для примера написать структуру на 3 байта.
                 ;//   uchar b2;        // На каждый байт подцепим ногу из PORTB. Конечно это
                 ;//   uchar b3;        // не рационально (всего то 3 бита нужно).
                 ;};                  // Но в целях демонстрации в самый раз.
                 ;                    // Для наглядности прикрутить по светодиоду и созерцать :)
                 ;
                 ;struct dataexchange_t pdata = {0};
                 ;
                 ;/* Эти переменные хранят статус текущей передачи */
                 ;static uchar    currentAddress;
                 ;static uchar    bytesRemaining;
                 ;
                 ;/* usbFunctionRead() вызывается когда хост запрашивает порцию данных от устройства
                 ; * Для дополнительной информации см. документацию в usbdrv.h
                 ; */
                 ;uchar   usbFunctionRead(uchar *data, uchar len)
                 ; 0000 003E {
                 _usbFunctionRead_G000:
                 ; .FSTART _usbFunctionRead_G000
                 ; 0000 003F     uchar j;
                 ; 0000 0040     uchar *buffer;
                 ; 0000 0041     if(len > bytesRemaining)
000262 93aa      	ST   -Y,R26
000263 d0e9      	RCALL __SAVELOCR4
                 ;	*data -> Y+5
                 ;	len -> Y+4
                 ;	j -> R17
                 ;	*buffer -> R18,R19
000264 91e0 0197 	LDS  R30,_bytesRemaining_G000
000266 81ac      	LDD  R26,Y+4
000267 17ea      	CP   R30,R26
000268 f408      	BRSH _0x96
                 ; 0000 0042         len = bytesRemaining;
000269 83ec      	STD  Y+4,R30
                 ; 0000 0043 
                 ; 0000 0044     buffer = (uchar*)&pdata;
                 _0x96:
                +
00026a e925     +LDI R18 , LOW ( _pdata )
00026b e031     +LDI R19 , HIGH ( _pdata )
                 	__POINTWRM 18,19,_pdata
                 ; 0000 0045 
                 ; 0000 0046     if(!currentAddress)        // Ни один кусок данных еще не прочитан.
00026c 91e0 0196 	LDS  R30,_currentAddress_G000
00026e 30e0      	CPI  R30,0
00026f f421      	BRNE _0x97
                 ; 0000 0047     {                          // Заполним структуру для передачи
                 ; 0000 0048         pdata.b1 = button;
000270 9290 0195 	STS  _pdata,R9
                 ; 0000 0049         button = 0xFF;
000272 efef      	LDI  R30,LOW(255)
000273 2e9e      	MOV  R9,R30
                 ; 0000 004A     }
                 ; 0000 004B 
                 ; 0000 004C     for(j=0; j<len; j++)
                 _0x97:
000274 e010      	LDI  R17,LOW(0)
                 _0x99:
000275 81ec      	LDD  R30,Y+4
000276 171e      	CP   R17,R30
000277 f4a8      	BRSH _0x9A
                 ; 0000 004D         data[j] = buffer[j+currentAddress];
000278 2fe1      	MOV  R30,R17
000279 81ad      	LDD  R26,Y+5
00027a 81be      	LDD  R27,Y+5+1
00027b e0f0      	LDI  R31,0
00027c 0fea      	ADD  R30,R26
00027d 1ffb      	ADC  R31,R27
00027e 010f      	MOVW R0,R30
00027f 2fa1      	MOV  R26,R17
000280 27bb      	CLR  R27
000281 91e0 0196 	LDS  R30,_currentAddress_G000
000283 e0f0      	LDI  R31,0
000284 0fea      	ADD  R30,R26
000285 1ffb      	ADC  R31,R27
000286 0fe2      	ADD  R30,R18
000287 1ff3      	ADC  R31,R19
000288 81e0      	LD   R30,Z
000289 01d0      	MOVW R26,R0
00028a 93ec      	ST   X,R30
00028b 5f1f      	SUBI R17,-1
00028c cfe8      	RJMP _0x99
                 _0x9A:
                 ; 0000 004F currentAddress += len;
00028d 81ec      	LDD  R30,Y+4
00028e 91a0 0196 	LDS  R26,_currentAddress_G000
000290 0fea      	ADD  R30,R26
000291 93e0 0196 	STS  _currentAddress_G000,R30
                 ; 0000 0050     bytesRemaining -= len;
000293 81ac      	LDD  R26,Y+4
000294 91e0 0197 	LDS  R30,_bytesRemaining_G000
000296 1bea      	SUB  R30,R26
000297 93e0 0197 	STS  _bytesRemaining_G000,R30
                 ; 0000 0051     return len;
000299 81ec      	LDD  R30,Y+4
00029a c038      	RJMP _0x2060002
                 ; 0000 0052 }
                 ; .FEND
                 ;
                 ;
                 ;/* usbFunctionWrite() вызывается когда хост отправляет порцию данных к устройству
                 ; * Для дополнительной информации см. документацию в usbdrv.h
                 ; */
                 ;uchar   usbFunctionWrite(uchar *data, uchar len)
                 ; 0000 0059 {
                 _usbFunctionWrite_G000:
                 ; .FSTART _usbFunctionWrite_G000
                 ; 0000 005A     uchar j;
                 ; 0000 005B     uchar *buffer;
                 ; 0000 005C     if(bytesRemaining == 0)
00029b 93aa      	ST   -Y,R26
00029c d0b0      	RCALL __SAVELOCR4
                 ;	*data -> Y+5
                 ;	len -> Y+4
                 ;	j -> R17
                 ;	*buffer -> R18,R19
00029d 91e0 0197 	LDS  R30,_bytesRemaining_G000
00029f 30e0      	CPI  R30,0
0002a0 f411      	BRNE _0x9B
                 ; 0000 005D         return 1;               /* конец передачи */
0002a1 e0e1      	LDI  R30,LOW(1)
0002a2 c030      	RJMP _0x2060002
                 ; 0000 005E 
                 ; 0000 005F     if(len > bytesRemaining)
                 _0x9B:
0002a3 91e0 0197 	LDS  R30,_bytesRemaining_G000
0002a5 81ac      	LDD  R26,Y+4
0002a6 17ea      	CP   R30,R26
0002a7 f408      	BRSH _0x9C
                 ; 0000 0060         len = bytesRemaining;
0002a8 83ec      	STD  Y+4,R30
                 ; 0000 0061 
                 ; 0000 0062     buffer = (uchar*)&pdata;
                 _0x9C:
                +
0002a9 e925     +LDI R18 , LOW ( _pdata )
0002aa e031     +LDI R19 , HIGH ( _pdata )
                 	__POINTWRM 18,19,_pdata
                 ; 0000 0063 
                 ; 0000 0064     for(j=0; j<len; j++)
0002ab e010      	LDI  R17,LOW(0)
                 _0x9E:
0002ac 81ec      	LDD  R30,Y+4
0002ad 171e      	CP   R17,R30
0002ae f4a0      	BRSH _0x9F
                 ; 0000 0065         buffer[j+currentAddress] = data[j];
0002af 2fa1      	MOV  R26,R17
0002b0 27bb      	CLR  R27
0002b1 91e0 0196 	LDS  R30,_currentAddress_G000
0002b3 e0f0      	LDI  R31,0
0002b4 0fea      	ADD  R30,R26
0002b5 1ffb      	ADC  R31,R27
0002b6 0fe2      	ADD  R30,R18
0002b7 1ff3      	ADC  R31,R19
0002b8 010f      	MOVW R0,R30
0002b9 81ad      	LDD  R26,Y+5
0002ba 81be      	LDD  R27,Y+5+1
0002bb 27ee      	CLR  R30
0002bc 0fa1      	ADD  R26,R17
0002bd 1fbe      	ADC  R27,R30
0002be 91ec      	LD   R30,X
0002bf 01d0      	MOVW R26,R0
0002c0 93ec      	ST   X,R30
0002c1 5f1f      	SUBI R17,-1
0002c2 cfe9      	RJMP _0x9E
                 _0x9F:
                 ; 0000 0067 currentAddress += len;
0002c3 81ec      	LDD  R30,Y+4
0002c4 91a0 0196 	LDS  R26,_currentAddress_G000
0002c6 0fea      	ADD  R30,R26
0002c7 93e0 0196 	STS  _currentAddress_G000,R30
                 ; 0000 0068     bytesRemaining -= len;
0002c9 81ac      	LDD  R26,Y+4
0002ca 91e0 0197 	LDS  R30,_bytesRemaining_G000
0002cc 1bea      	SUB  R30,R26
0002cd 93e0 0197 	STS  _bytesRemaining_G000,R30
                 ; 0000 0069 
                 ; 0000 006A //    if(bytesRemaining == 0)     // Все данные получены
                 ; 0000 006B //    {                           // Выставим значения на PORTB
                 ; 0000 006C //        if ( pdata.b1 )
                 ; 0000 006D //            PORTB |= _BV(1);
                 ; 0000 006E //        else
                 ; 0000 006F //            PORTB &= ~_BV(1);
                 ; 0000 0070 //
                 ; 0000 0071 //
                 ; 0000 0072 //        if ( pdata.b2 )
                 ; 0000 0073 //            PORTB |= _BV(2);
                 ; 0000 0074 //        else
                 ; 0000 0075 //            PORTB &= ~_BV(2);
                 ; 0000 0076 //
                 ; 0000 0077 //
                 ; 0000 0078 //        if ( pdata.b3 )
                 ; 0000 0079 //            PORTB |= _BV(3);
                 ; 0000 007A //        else
                 ; 0000 007B //            PORTB &= ~_BV(3);
                 ; 0000 007C //    }
                 ; 0000 007D 
                 ; 0000 007E     return bytesRemaining == 0; /* 0 означает, что есть еще данные */
0002cf 91a0 0197 	LDS  R26,_bytesRemaining_G000
0002d1 e0e0      	LDI  R30,LOW(0)
0002d2 d075      	RCALL __EQB12
                 _0x2060002:
0002d3 d07e      	RCALL __LOADLOCR4
0002d4 9627      	ADIW R28,7
0002d5 9508      	RET
                 ; 0000 007F }
                 ; .FEND
                 ;
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;usbMsgLen_t usbFunctionSetup(uchar data[8])
                 ; 0000 0084 {
                 _usbFunctionSetup_G000:
                 ; .FSTART _usbFunctionSetup_G000
                 ; 0000 0085 usbRequest_t    *rq = (void *)data;
                 ; 0000 0086 
                 ; 0000 0087     if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* HID устройство */
0002d6 93ba      	ST   -Y,R27
0002d7 93aa      	ST   -Y,R26
0002d8 d076      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	*rq -> R16,R17
                +
0002d9 810a     +LDD R16 , Y + 2
0002da 811b     +LDD R17 , Y + 2 + 1
                 	__GETWRS 16,17,2
0002db 01d8      	MOVW R26,R16
0002dc 91ec      	LD   R30,X
0002dd 76e0      	ANDI R30,LOW(0x60)
0002de 32e0      	CPI  R30,LOW(0x20)
0002df f4c1      	BRNE _0xA0
                 ; 0000 0088         if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
0002e0 01f8      	MOVW R30,R16
0002e1 81a1      	LDD  R26,Z+1
0002e2 30a1      	CPI  R26,LOW(0x1)
0002e3 f441      	BRNE _0xA1
                 ; 0000 0089             // у нас только одна разновидность репорта, можем игнорировать report-ID
                 ; 0000 008A             bytesRemaining = sizeof(struct dataexchange_t);
0002e4 e0e1      	LDI  R30,LOW(1)
0002e5 93e0 0197 	STS  _bytesRemaining_G000,R30
                 ; 0000 008B             currentAddress = 0;
0002e7 e0e0      	LDI  R30,LOW(0)
0002e8 93e0 0196 	STS  _currentAddress_G000,R30
                 ; 0000 008C             return USB_NO_MSG;  // используем usbFunctionRead() для отправки данных хосту
0002ea efef      	LDI  R30,LOW(255)
0002eb c00d      	RJMP _0x2060001
                 ; 0000 008D         }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
                 _0xA1:
0002ec 01f8      	MOVW R30,R16
0002ed 81a1      	LDD  R26,Z+1
0002ee 30a9      	CPI  R26,LOW(0x9)
0002ef f441      	BRNE _0xA3
                 ; 0000 008E             // у нас только одна разновидность репорта, можем игнорировать report-ID
                 ; 0000 008F             bytesRemaining = sizeof(struct dataexchange_t);
0002f0 e0e1      	LDI  R30,LOW(1)
0002f1 93e0 0197 	STS  _bytesRemaining_G000,R30
                 ; 0000 0090             currentAddress = 0;
0002f3 e0e0      	LDI  R30,LOW(0)
0002f4 93e0 0196 	STS  _currentAddress_G000,R30
                 ; 0000 0091             return USB_NO_MSG;  // используем usbFunctionWrite() для получения данных от хоста
0002f6 efef      	LDI  R30,LOW(255)
0002f7 c001      	RJMP _0x2060001
                 ; 0000 0092         }
                 ; 0000 0093     }else{
                 _0xA3:
                 _0xA0:
                 ; 0000 0094         /* остальные запросы мы просто игнорируем */
                 ; 0000 0095     }
                 ; 0000 0096     return 0;
0002f8 e0e0      	LDI  R30,LOW(0)
                 _0x2060001:
0002f9 d05a      	RCALL __LOADLOCR2
0002fa 9624      	ADIW R28,4
0002fb 9508      	RET
                 ; 0000 0097 }
                 ; .FEND
                 ;/* ------------------------------------------------------------------------- */
                 ;
                 ;void main(void)
                 ; 0000 009B {
                 _main:
                 ; .FSTART _main
                 ; 0000 009C     uchar i = 0;
                 ; 0000 009D // Port B initialization
                 ; 0000 009E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 009F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
                 ;	i -> R17
0002fc e010      	LDI  R17,0
0002fd e0e0      	LDI  R30,LOW(0)
0002fe bbe7      	OUT  0x17,R30
                 ; 0000 00A0 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 00A1 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
0002ff e0ef      	LDI  R30,LOW(15)
000300 bbe8      	OUT  0x18,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // Port C initialization
                 ; 0000 00A4 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000301 e0e7      	LDI  R30,LOW(7)
000302 bbe4      	OUT  0x14,R30
                 ; 0000 00A5 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00A6 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
000303 bbe5      	OUT  0x15,R30
                 ; 0000 00A7 
                 ; 0000 00A8 // Timer/Counter 1 initialization
                 ; 0000 00A9 // Clock source: System Clock
                 ; 0000 00AA // Clock value: 1000,000 kHz
                 ; 0000 00AB // Mode: Normal top=0xFFFF
                 ; 0000 00AC // OC1A output: Disconnected
                 ; 0000 00AD // OC1B output: Disconnected
                 ; 0000 00AE // Noise Canceler: Off
                 ; 0000 00AF // Input Capture on Falling Edge
                 ; 0000 00B0 // Timer Period: 25 ms
                 ; 0000 00B1 // Timer1 Overflow Interrupt: On
                 ; 0000 00B2 // Input Capture Interrupt: Off
                 ; 0000 00B3 // Compare A Match Interrupt: Off
                 ; 0000 00B4 // Compare B Match Interrupt: Off
                 ; 0000 00B5 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000304 e0e0      	LDI  R30,LOW(0)
000305 bdef      	OUT  0x2F,R30
                 ; 0000 00B6 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
000306 e0e2      	LDI  R30,LOW(2)
000307 bdee      	OUT  0x2E,R30
                 ; 0000 00B7 TCNT1H=0x9E;
000308 e9ee      	LDI  R30,LOW(158)
000309 bded      	OUT  0x2D,R30
                 ; 0000 00B8 TCNT1L=0x58;
00030a e5e8      	LDI  R30,LOW(88)
00030b bdec      	OUT  0x2C,R30
                 ; 0000 00B9 ICR1H=0x00;
00030c e0e0      	LDI  R30,LOW(0)
00030d bde7      	OUT  0x27,R30
                 ; 0000 00BA ICR1L=0x00;
00030e bde6      	OUT  0x26,R30
                 ; 0000 00BB OCR1AH=0x00;
00030f bdeb      	OUT  0x2B,R30
                 ; 0000 00BC OCR1AL=0x00;
000310 bdea      	OUT  0x2A,R30
                 ; 0000 00BD OCR1BH=0x00;
000311 bde9      	OUT  0x29,R30
                 ; 0000 00BE OCR1BL=0x00;
000312 bde8      	OUT  0x28,R30
                 ; 0000 00BF 
                 ; 0000 00C0 // USART initialization
                 ; 0000 00C1 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00C2 // USART Receiver: Off
                 ; 0000 00C3 // USART Transmitter: On
                 ; 0000 00C4 // USART Mode: Asynchronous
                 ; 0000 00C5 // USART Baud Rate: 9600
                 ; 0000 00C6 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
000313 b9eb      	OUT  0xB,R30
                 ; 0000 00C7 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000314 e0e8      	LDI  R30,LOW(8)
000315 b9ea      	OUT  0xA,R30
                 ; 0000 00C8 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
000316 e8e6      	LDI  R30,LOW(134)
000317 bde0      	OUT  0x20,R30
                 ; 0000 00C9 UBRRH=0x00;
000318 e0e0      	LDI  R30,LOW(0)
000319 bde0      	OUT  0x20,R30
                 ; 0000 00CA UBRRL=0x33;
00031a e3e3      	LDI  R30,LOW(51)
00031b b9e9      	OUT  0x9,R30
                 ; 0000 00CB 
                 ; 0000 00CC // Analog Comparator initialization
                 ; 0000 00CD // Analog Comparator: Off
                 ; 0000 00CE // The Analog Comparator's positive input is
                 ; 0000 00CF // connected to the AIN0 pin
                 ; 0000 00D0 // The Analog Comparator's negative input is
                 ; 0000 00D1 // connected to the AIN1 pin
                 ; 0000 00D2 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00031c e8e0      	LDI  R30,LOW(128)
00031d b9e8      	OUT  0x8,R30
                 ; 0000 00D3 SFIOR=(0<<ACME);
00031e e0e0      	LDI  R30,LOW(0)
00031f bfe0      	OUT  0x30,R30
                 ; 0000 00D4 
                 ; 0000 00D5 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00D6 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
000320 e0e4      	LDI  R30,LOW(4)
000321 bfe9      	OUT  0x39,R30
                 ; 0000 00D7 
                 ; 0000 00D8     usbInit();
000322 deea      	RCALL _usbInit_G000
                 ; 0000 00D9     usbDeviceDisconnect();  // принудительно отключаемся от хоста, так делать можно только при выключенных прерываниях!
000323 9a8c      	SBI  0x11,4
                 ; 0000 00DA 
                 ; 0000 00DB     while(--i){             // пауза > 250 ms
                 _0xA5:
000324 5011      	SUBI R17,LOW(1)
000325 f021      	BREQ _0xA7
                 ; 0000 00DC         _delay_ms(1);
000326 e0a1      	LDI  R26,LOW(1)
000327 e0b0      	LDI  R27,0
000328 d015      	RCALL _delay_ms
                 ; 0000 00DD     }
000329 cffa      	RJMP _0xA5
                 _0xA7:
                 ; 0000 00DE 
                 ; 0000 00DF     usbDeviceConnect();     // подключаемся
00032a 988c      	CBI  0x11,4
                 ; 0000 00E0 
                 ; 0000 00E1     #asm ("sei");                  // разрешаем прерывания
00032b 9478      	sei
                 ; 0000 00E2 
                 ; 0000 00E3     while(1){                // главный цикл программы
                 _0xA8:
                 ; 0000 00E4         usbPoll();          // эту функцию надо регулярно вызывать с главного цикла, максимальная задержка между вызовам ...
00032c ddcd      	RCALL _usbPoll_G000
                 ; 0000 00E5         if (button != 0) putchar (button);
00032d 2099      	TST  R9
00032e f011      	BREQ _0xAB
00032f 2da9      	MOV  R26,R9
000330 d006      	RCALL _putchar
                 ; 0000 00E6         button = 0;
                 _0xAB:
000331 2499      	CLR  R9
                 ; 0000 00E7         delay_ms (10);
000332 e0aa      	LDI  R26,LOW(10)
000333 e0b0      	LDI  R27,0
000334 d009      	RCALL _delay_ms
                 ; 0000 00E8     }
000335 cff6      	RJMP _0xA8
                 ; 0000 00E9 }
                 _0xAC:
000336 cfff      	RJMP _0xAC
                 ; .FEND
                 ;/* ------------------------------------------------------------------------- */
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000337 93aa      	ST   -Y,R26
                 putchar0:
000338 9b5d           sbis usr,udre
000339 cffe           rjmp putchar0
00033a 81e8           ld   r30,y
00033b b9ec           out  udr,r30
00033c 9621      	ADIW R28,1
00033d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _usbMsgPtr:
000160           	.BYTE 0x2
                 _usbRxToken:
000162           	.BYTE 0x1
                 _usbConfiguration:
000163           	.BYTE 0x1
                 _usbTxStatus1:
000164           	.BYTE 0xC
                 _usbRxBuf:
000170           	.BYTE 0x16
                 _usbRxLen:
000186           	.BYTE 0x1
                 _usbTxLen:
000187           	.BYTE 0x1
                 _usbTxBuf:
000188           	.BYTE 0xB
                 _usbMsgLen_G000:
000193           	.BYTE 0x1
                 _usbMsgFlags_G000:
000194           	.BYTE 0x1
                 _pdata:
000195           	.BYTE 0x1
                 _currentAddress_G000:
000196           	.BYTE 0x1
                 _bytesRemaining_G000:
000197           	.BYTE 0x1
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
00033e 9610      	adiw r26,0
00033f f039      	breq __delay_ms1
                 __delay_ms0:
                +
000340 ed80     +LDI R24 , LOW ( 0x7D0 )
000341 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000342 9701     +SBIW R24 , 1
000343 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000344 95a8      	wdr
000345 9711      	sbiw r26,1
000346 f7c9      	brne __delay_ms0
                 __delay_ms1:
000347 9508      	ret
                 
                 __EQB12:
000348 17ea      	CP   R30,R26
000349 e0e1      	LDI  R30,1
00034a f009      	BREQ __EQB12T
00034b 27ee      	CLR  R30
                 __EQB12T:
00034c 9508      	RET
                 
                 __SAVELOCR4:
00034d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00034e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00034f 931a      	ST   -Y,R17
000350 930a      	ST   -Y,R16
000351 9508      	RET
                 
                 __LOADLOCR4:
000352 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000353 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000354 8119      	LDD  R17,Y+1
000355 8108      	LD   R16,Y
000356 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  10 r1 :   1 r2 :   0 r3 :   0 r4 :   1 r5 :   1 r6 :   0 r7 :   1 
r8 :   0 r9 :   8 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  30 r17:  51 r18:  10 r19:   9 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  89 r27:  19 r28:  21 r29:   1 r30: 290 r31:  46 
x  :  10 y  : 117 z  :  20 
Registers used: 22 out of 35 (62.9%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   8 
adiw  :  20 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  15 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   0 brne  :  22 brpl  :   0 brsh  :   7 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   1 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   9 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 
cpc   :   5 cpi   :  25 cpse  :   0 dec   :   1 des   :   0 eor   :   1 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   6 
inc   :   0 ld    :  23 ldd   :  58 ldi   : 115 lds   :  23 lpm   :   9 
lsl   :   0 lsr   :   0 mov   :  19 movw  :  20 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   3 or    :   0 ori   :   2 out   :  37 
pop   :   0 push  :   0 rcall :  23 ret   :  12 reti  :   1 rjmp  :  72 
rol   :   0 ror   :   0 sbc   :   1 sbci  :   0 sbi   :   1 sbic  :   0 
sbis  :   1 sbiw  :  13 sbr   :   0 sbrc  :  12 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   2 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  41 std   :  17 
sts   :  35 sub   :   4 subi  :   8 swap  :   0 tst   :   1 wdr   :   1 

Instructions used: 45 out of 114 (39.5%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006ae   1512    198   1710    8192  20.9%
[.dseg] 0x000060 0x000198      0     56     56    1024   5.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
